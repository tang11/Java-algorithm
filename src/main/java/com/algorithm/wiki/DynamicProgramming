动态规划与递归
1、动态规划是自底向上， 而递归是自顶向下的
 1.1、自顶向下是什么？
 从顶端向下延伸，一个复杂的问题，向下逐渐分解规模，直到f(1)和f(2)触底，然后逐层返回答案。
     public  static int fibonacci(int n) {
        if(n ==1 || n == 2) {
            return n;
        }
        return fibonacci(n-1) + fibonacci(n-2);
    }
  递归的实现存在的问题是：计算的数值稍微大一点，基本计算不出来。

  1.2、自底向上是什么？
  直接从最底下开始，问题规模最小的f(1)和f(2)开始往上推，直接推到我们想要的例如f(10),
  （动态规划都会记录之前的值，保证每个步骤计算一次，不会重复计算），动态规划一般是由循环迭代完成的。
    public  static   int fibonacciDynamic(int n) {
         int[] dp = new int[n+1];
         dp[1]= 1; dp[2]= 2;
         for (int i = 3; i<= n; i ++) {
             dp[i] = dp[i-1] + dp[i-2];
         }
         return dp[n];
      }
1.3、  状态转移方程
  这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：

  可见列出「状态转移方程」的重要性，它是解决问题的核心。

 很容易发现，其实状态转移方程直接代表着暴力解法。
千万不要看不起暴力破解，动态规划问题最困难的就是写出状态转移方程，
1、爬楼梯
